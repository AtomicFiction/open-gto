
* Version 3.5.2

    * Minor patches to GtoContainer C++ lib


* Version 3.5.1

    o Fixed autoconf/automake:

      * Should always work if maya/rman are disabled (the default)

      * Removed checking for specific versions of maya & compiler
        combinations--there's too many to check them all.

      * Tries to use the 'buildconfig' file included in the Maya distro when
        building maya plugins.  This should make supporting different
        versions and platforms a lot easier.

      * Rman is not tested recently, but is much simpler than maya, so it
        should work

    o Added gtoDB python module, as a faster replacement for gtoContainer.py

      * gtoDB is written in swig.  The cpp file is in the dist, so swig itself
        is only needed if the .i files are changed.

    o gtoIO and GtoDeformer build, but GtoCacheEmitter, GtoParticleDisplay, and
      GtoParticleExport are missing dependencies from the Tweak source tree.
      I'm leaving them in the distro in case someone wants to use them as a
      starting point.  Maybe someday they'll get fixed.


* Version 3.5

    o Added houndini geo converter and four new maya plugins: GtoDeformer,
      GtoParticleDisplay, GtoParticleExport, GtoCacheEmitter

* Version 3.4

    o The GTO license terms have been changed: the code is still covered by
      the LGPL, but with additional *exceptions* similar to those used by
      the FLTK library. These exceptions make it easier to use GTO in
      commercial projects. See LICENSE or the GTO documentation for
      details.

    o The library no longer attempts to be source code compatible with
      older Microsoft compilers. Some functions may throw on error.

    o Bug fixes to the C++ Gto::Writer class for output of text GTO files.

    o Run-time error checking of the Gto::Writer API. The class will
      complain if the API is used in a undocumented manner. It may throw an
      exception.

    o The GTO source code distribution now comes with Maya and Houdini
      plugins for cached deforming geometry and particle export and
      display.

* Version 3.2

      o Added RiGtoPlugin and RiGtoRibOut to the distribution.  RiGtoPlugin
      should work with most Renderman®-compliant renderers that support the 
      RiProcedural DynamicLoad RIB token.  The plugin will read geometry from
      a gto file and hand it directly to the renderer, eliminating the 
      expensive translation to/from ASCII RIB.  For those that don't support
      DynamicLoad, you may be able to use RiProcedural RunProgram with 
      RiGtoRibOut.  See the documentation for more details.

      o There is now an online GTO discussion forum.  Hopefully this will
      help to keep protocols standard across facilities as much as possible,
      as well as serve as a repository of GTO software knowlege.  As always,
      if you're using GTO, we'd love to hear from you!  You can find the 
      board at:
      
            http://www.tweakfilms.com/gtoforum/
      
      o I added an "html" target in the ./doc directory.  It isn't built by
      default, but just type "make html" in there if you want html docs.

* Version 3.1

      o Added the ability to access random objects in a gto file from the
        Python module.

* Version 3.0

      o Included gtoContainer.py (self-documenting module) plus usage examples 
        in python/gtoContainer.

      o configure script now works with Maya 4.x and Maya 5.x
      
      o An interpretation string has been added to the property header.

      o An additional uint32 has been added as padding to the object,
        component, and property headers for future expansion slop.

      o A section on interpretation strings has been added to the documentation
        and to the reader/writer classes.

      o Added a type reference to the documentation.

* Version 2.1

      o gtofilter was changed to optionaly accept POSIX style regular
        expressions in addition to shell-like "glob" expressions.

      o The C++ writer class now defaults to writing compressed files when the
        open() function is called. A second bool argument can be passed to it to
        prevent the compression.

      o The proposed texture assignment protocol (from version 2.0.4) has been
        rejected.

      o A new protocol "channel" is introduced for assigning mapped surface
        varying data on geometry. An arbitrary number of texture maps may be 
        assigned to the geometry. See section 6.13 Channels Protocol.

      o The material protocol has been fleshed out. See section 6.8 Material
        Protocol.

      o The polygon protocol was missing the definition of the optional
        mappings component. See section 6.5 Polygon Protocol.

* Version 2.0.5 Bug fix version. Repaired problems with the configuration
  scripts. Missing headers.

* Version 2.0.4 Bug fix version. Some configuration problems solved.

* Version 2.0 File headers changed. The format is not compatible with 1.0.

* Version 1.0 

